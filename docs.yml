openapi: "3.0.2"
info:
  title: Archivica
  version: "1.0"
servers:
  - url: http://localhost:4000
components:
  securitySchemes:
    bearerToken:
      type: apiKey
      in: header
      name: accessToken
  parameters:
    Filter:
      in: query
      name: filter
      schema:
        type: string
      description: Filter results
      example: "name,eq,pero"
    Page:
      in: query
      name: page
      schema:
        type: number
      description: Page of the results - used in pagination
      example: "1"
    Sort:
      in: query
      name: sort
      schema:
        type: string
      description: Sort results
      example: "name,asc"
    ID:
      in: path
      name: id
      schema:
        type: string
      required: true

  schemas:
    PostDomain:
      type: object
      properties:
        description:
          type: string
        architect:
          type: string
        city:
          type: string
        subAge:
          type: string
        owner:
          type: string
          format: ObjectId
        gallery:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              imagePath:
                type: string
              width:
                type: number
              height:
                type: number
        comments:
          type: array
          items:
            type: object
            properties:
              owner:
                type: string
                format: ObjectId
              comment:
                type: string
        likes:
          type: array
          items:
            type: object
            properties:
              owner:
                type: string
                format: ObjectId
              liked:
                type: boolean
      required:
        - date
        - description
        - owner

    RegisterInput:
      type: object
      properties:
        email:
          type: string
          description: user email
        password:
          type: string
          description: user password
        firstName:
          type: string
          description: user first name
        lastName:
          type: string
          description: user last name

    RegisterOutput:
      type: object
      properties:
        email:
          type: string
          description: user email
        firstName:
          type: string
          description: user first name
        lastName:
          type: string
          description: user last name
        accessToken:
          type: string
          description: access token
        refreshToken:
          type: string
          description: refresh token

    LoginInput:
      type: object
      properties:
        email:
          type: string
          description: user email
        password:
          type: string
          description: user password

    LoginOutput:
      type: object
      properties:
        email:
          type: string
          description: user email
        firstName:
          type: string
          description: user first name
        lastName:
          type: string
          description: user last name
        accessToken:
          type: string
          description: access token
        refreshToken:
          type: string
          description: refresh token

    Architect:
      type: object
      properties:
        firstName:
          type: string
          description: Architect first name
        lastName:
          type: string
          description: Architect last name
        yearBorn:
          type: number
          description: Architect year of birth
        yearDied:
          type: number
          description: Architect year of death
        countryId:
          type: string
          description: Id of architect's country
    ArchitecturePeriod:
      type: object
      properties:
        name:
          type: string
          description: Name
        synonyms:
          type: array
          description: Other names used for this period
          items:
            example: string
        start:
          type: object
          properties:
            year:
              type: number
            unit:
              type: string
              example: "AD or BC"
        end:
          type: object
          properties:
            year:
              type: number
            unit:
              type: string
              example: "AD or BC"
    ArchitectureStyle:
      type: object
      properties:
        name:
          type: string
          description: Name
        synonyms:
          type: array
          description: Other names used for this style
          items:
            example: string
        start:
          type: object
          properties:
            year:
              type: number
            unit:
              type: string
              example: "AD or BC"
        end:
          type: object
          properties:
            year:
              type: number
            unit:
              type: string
              example: "AD or BC"
  examples:
    randomUser:
      value:
        email: "test@test.com"
        password: "testPassword123"
        firstName: "First Name"
        lastName: "Last Name"
    randomPostMinimal:
      value:
        _id: "659c43804d863ea1cdc9bfb3"
        date: "1970-05-23T20:42:26.588Z"
        description: "Great Britain"
        architect: "616027eac10676d00130cf84"
        city: "615ed354fb3769b9966360ce"
        subAge: "6164115e26ce643608f42d65"
        owner: "615ee4cb14de96bf4f2fd6e1"
        gallery:
          - name: "Image1"
            imagePath: "https://picsum.photos/960/540"
            width: 960
            height: 540
            _id: "659c43804d863ea1cdc9bfb4"
        comments:
          - owner: "615ee72db9d47904c7e22931"
            comment: "This is awesome!"
            _id: "659c43804d863ea1cdc9bfb8"
        likes:
          - owner: "615ee72db9d47904c7e22931"
            liked: true
            _id: "659c43804d863ea1cdc9bfba"

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example: { message: Bad or malformed request from client. }
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example: { message: User not authorized }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example: { message: Not Found }
    ServerError:
      description: SERVER ERROR
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              error:
                type: string
          example:
            {
              message: "Oops! It's not you, it's us.",
              error: A server error occured.,
            }
paths:
  /api/v1/users/register:
    post:
      description: Register a new user
      tags: [Users]
      requestBody:
        description: User registration information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterInput"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterOutput"
        500:
          $ref: "#/components/responses/ServerError"
  /api/v1/users/login:
    post:
      description: Login
      tags: [Users]
      requestBody:
        description: User login information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginOutput"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
  /api/v1/users/current:
    get:
      description: Get current user
      tags: [Users]
      parameters:
        - name: accessToken
          in: header
          required: true
          schema:
            type: object
            properties:
              accessToken:
                type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterOutput"
        401:
          $ref: "#/components/responses/Unauthorized"
  /api/v1/users/logout:
    delete:
      description: Logout
      tags: [Users]
      parameters:
        - name: accessToken
          in: header
          required: true
          schema:
            type: object
            properties:
              accessToken:
                type: string
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/Unauthorized"
  /api/v1/users/refresh-token:
    post:
      description: Refresh token
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/users/forgot-password:
    post:
      description: Forgot password
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  string:
                    type: string
                    example: Hello ${user.firstName} ${user.lastName}!Looks like you forgot your password.
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/users/validate-token:
    post:
      description: Token validation
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                token:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: true
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/users/reset-password:
    post:
      description: Password reset
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                token:
                  type: string
                newPassword:
                  type: string
                confirmNewPassword:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Password successfully changed.
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/posts:
    get:
      description: Get posts
      tags: [Posts]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostDomain"
        400:
          $ref: "#/components/responses/BadRequest"
    post:
      description: Create post
      tags: [Posts]
      requestBody:
        description: Create post request body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostDomain"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Created.
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/posts/{id}:
    get:
      description: Get posts by ID
      tags: [Posts]
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDomain"
  /api/v1/architects:
    get:
      description: Get all architects
      tags: [Architects]
      parameters:
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Sort"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Architect"

    post:
      description: Create an architect
      tags: [Architects]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Architect"
      responses:
        201:
          description: Created
          content:
            application/json:
              example: "Created"
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/architects/{id}:
    put:
      description: Update an architect
      tags: [Architects]
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Architect"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Architect"
        400:
          $ref: "#/components/responses/BadRequest"
    delete:
      description: Delete an architect
      tags: [Architects]
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          description: OK

  /api/v1/architecture-periods:
    get:
      description: Get all architecture periods
      tags: [Architecture Periods]
      parameters:
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Sort"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArchitecturePeriod"

    post:
      description: Create an architecture period
      tags: [Architecture Periods]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArchitecturePeriod"
      responses:
        201:
          description: Created
          content:
            application/json:
              example: "Created"
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/architecture-periods/{id}:
    put:
      description: Update an architecture period
      tags: [Architecture Periods]
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArchitecturePeriod"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchitecturePeriod"
        400:
          $ref: "#/components/responses/BadRequest"
    delete:
      description: Delete an architecture period
      tags: [Architecture Periods]
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          description: OK
  /api/v1/architecture-styles:
    get:
      description: Get all architecture styles
      tags: [Architecture Styles]
      parameters:
        - $ref: "#/components/parameters/Filter"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Sort"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArchitectureStyle"

    post:
      description: Create an architecture style
      tags: [Architecture Styles]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArchitectureStyle"
      responses:
        201:
          description: Created
          content:
            application/json:
              example: "Created"
        400:
          $ref: "#/components/responses/BadRequest"
  /api/v1/architecture-styles/{id}:
    put:
      description: Update an architecture style
      tags: [Architecture Styles]
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArchitectureStyle"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArchitectureStyle"
        400:
          $ref: "#/components/responses/BadRequest"
    delete:
      description: Delete an architecture style
      tags: [Architecture Styles]
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        200:
          description: OK
